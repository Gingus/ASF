from addons.mobile_extensions import Mobile_Extensions
from selenium.webdriver.common.by import By
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: My first Project
    Package: TestProject.Generated.Tests.MyFirstProject
    Test: Zoom Google
    Generated by: Phil Minard (pminard1@outlook.com)
    Generated on 01/21/2021, 19:54:20
"""


@pytest.fixture()
def driver():
    capabilities = {
        "platformName": "Android",
        "udid": "emulator-5554",
        "app": "{{APP_PATH}}",
        "appPackage": "{{YOUR_APP_PACKAGE}}",
        "appActivity": "{{YOUR_APP_ACTIVITY}}",
    }
    driver = webdriver.Remote(token="VMpvudCAmswhayszeAdUrDkkfYLqOXbinXcPQe9x-E81", projectname="My first Project", jobname="Zoom Google", desired_capabilities=capabilities)
    step_settings = StepSettings(timeout=15000, sleep_time=500, sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """Zoom test."""


    # 1. "Reset App"
    # "Clear application data and restart (Auto-generated)"
    driver.reset()

    # 2. "Tap at ('540','2222') with '1' fingers for '100'ms"
    driver.tap(positions=[(540, 2222)], duration=100)

    # 3. "Click 'Deny'"
    deny = driver.find_element(By.ID, "com.android.permissioncontroller:id/permission_deny_button")
    deny.click()

    # 4. "Tap at ('829','2217') with '1' fingers for '100'ms"
    driver.tap(positions=[(829, 2217)], duration=100)

    # 5. "Tap at ('212','2217') with '1' fingers for '100'ms"
    driver.tap(positions=[(212, 2217)], duration=100)

    # 6. "Make a Zoom gesture on 'com.google.android.apps.maps:id/home_...'"
    com_google_android_apps_maps_colon_id_slash_home_ = (By.ID, "com.google.android.apps.maps:id/home_bottom_sheet_container")
    driver.addons().execute(Mobile_Extensions.zoomtoelementandroid(), *com_google_android_apps_maps_colon_id_slash_home_)

    # 7. "Click 'com.google.android.apps.maps:id/home_...'"
    com_google_android_apps_maps_colon_id_slash_home_ = driver.find_element(By.ID, "com.google.android.apps.maps:id/home_bottom_sheet_container")
    com_google_android_apps_maps_colon_id_slash_home_.click()

    # 8. "Click 'com.google.android.apps.maps:id/home_...'"
    com_google_android_apps_maps_colon_id_slash_home_ = driver.find_element(By.ID, "com.google.android.apps.maps:id/home_bottom_sheet_container")
    com_google_android_apps_maps_colon_id_slash_home_.click()

    # 9. "Click 'com.google.android.apps.maps:id/home_...'"
    com_google_android_apps_maps_colon_id_slash_home_ = driver.find_element(By.ID, "com.google.android.apps.maps:id/home_bottom_sheet_container")
    com_google_android_apps_maps_colon_id_slash_home_.click()

    # 10. "Click 'ANDROID.VIEW.VIEW'"
    android_view_view = driver.find_element(By.XPATH, "//android.view.ViewGroup//android.view.View")
    android_view_view.click()

    # 11. "Click 'ANDROID.VIEW.VIEW'"
    android_view_view = driver.find_element(By.XPATH, "//android.view.ViewGroup//android.view.View")
    android_view_view.click()

    # 12. "Make a Swipe gesture from ('284','1570') to ('655','1043')"
    driver.swipe(start_x=284, start_y=1570, end_x=655, end_y=1043, duration=1290)

    # 13. "Click 'ANDROID.VIEW.VIEW'"
    android_view_view = driver.find_element(By.XPATH, "//android.view.ViewGroup//android.view.View")
    android_view_view.click()

    # 14. "Click 'com.google.android.apps.maps:id/home_...'"
    com_google_android_apps_maps_colon_id_slash_home_ = driver.find_element(By.ID, "com.google.android.apps.maps:id/home_bottom_sheet_container")
    com_google_android_apps_maps_colon_id_slash_home_.click()


def zoom():
    action1 = TouchAction(driver)
    action2 = TouchAction(driver)
    zoom_action = MultiAction(driver)

    action1.press(x=x * 0.4, y=y * 0.4).wait(1000).move_to(x=x * 0.2, y=y * 0.2).wait(1000).release()
    action2.press(x=x * 0.6, y=y * 0.6).wait(1000).move_to(x=x * 0.8, y=y * 0.8).wait(1000).release()

    print('start zoom...')

    # driver.swipe(start_x=332, start_y=1261, end_x=303, end_y=1135, duration=2429)


zoom_action.add(action1, action2)
zoom_action.perform()


