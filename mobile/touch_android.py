import math
import radius as radius
import theta as theta
from appium import webdriver
from math import pi
from addons.mobile_extensions import Mobile_Extensions
from appium.webdriver.common.touch_action import TouchAction
from selenium.webdriver.common.by import By
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: My first Project
    Package: TestProject.Generated.Tests.MyFirstProject
    Test: Touch android
    Generated by: Phil Minard (pminard1@outlook.com)
    Generated on 01/21/2021, 19:36:59
"""


@pytest.fixture()
def driver():
    capabilities = {
        "platformName": "Android",
        "udid": "emulator-5554",
        "app": "{{APP_PATH}}",
        "appPackage": "{{YOUR_APP_PACKAGE}}",
        "appActivity": "{{YOUR_APP_ACTIVITY}}",
    }
    driver = webdriver.Remote(token="VMpvudCAmswhayszeAdUrDkkfYLqOXbinXcPQe9x-E81", projectname="My first Project",
                              jobname="Touch android", desired_capabilities=capabilities)
    step_settings = StepSettings(timeout=15000, sleep_time=500, sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """android."""


    # 1. "Reset App"
    # "Clear application data and restart (Auto-generated)"
    driver.reset()

    # 2. "Click 'Graphics'"
    graphics = driver.find_element(By.XPATH, "//android.widget.TextView[@content-desc = 'Graphics']")
    graphics.click()

    # 3. "Make a Swipe gesture from ('496','1952') to ('482','1420')"
    driver.swipe(start_x=496, start_y=1952, end_x=482, end_y=1420, duration=1563)

    # 4. "Click 'FingerPaint'"
    fingerpaint = driver.find_element(By.XPATH, "//android.widget.TextView[@content-desc = 'FingerPaint']")
    fingerpaint.click()

    # 5. "Click 'ANDROID.VIEW.VIEW'"
    android_view_view = driver.find_element(By.XPATH, "//android.widget.FrameLayout[2]/android.view.View")
    android_view_view.click()

    # 6. "Make a Swipe gesture from ('515','1444') to ('593','1541')"
    driver.swipe(start_x=515, start_y=1444, end_x=593, end_y=1541, duration=2323)

    # 7. "Make a Zoom gesture on 'More options'"
    more_options = (By.XPATH, "//android.widget.ImageButton[@content-desc = 'More options']")
    driver.addons().execute(Mobile_Extensions.zoomtoelementandroid(), *more_options)

    # 8. "Make a Swipe gesture from ('395','1348') to ('323','1256')"
    driver.swipe(start_x=395, start_y=1348, end_x=323, end_y=1256, duration=1536)

    # 9. "Make a Swipe gesture from ('332','1261') to ('303','1135')"
    driver.swipe(start_x=332, start_y=1261, end_x=303, end_y=1135, duration=2429)

    # 10. "Make a Swipe gesture from ('308','1150') to ('328','1053')"
    driver.swipe(start_x=308, start_y=1150, end_x=328, end_y=1053, duration=2181)

    # 11. "Make a Swipe gesture from ('328','1053') to ('381','995')"
    driver.swipe(start_x=328, start_y=1053, end_x=381, end_y=995, duration=2245)

    # 12. "Make a Swipe gesture from ('376','1005') to ('448','956')"
    driver.swipe(start_x=376, start_y=1005, end_x=448, end_y=956, duration=2651)

    # 13. "Make a Swipe gesture from ('443','961') to ('520','956')"
    driver.swipe(start_x=443, start_y=961, end_x=520, end_y=956, duration=3015)

    # 14. "Make a Swipe gesture from ('520','961') to ('597','1000')"
    driver.swipe(start_x=520, start_y=961, end_x=597, end_y=1000, duration=2051)

    # 15. "Make a Swipe gesture from ('607','1010') to ('655','1101')"
    driver.swipe(start_x=607, start_y=1010, end_x=655, end_y=1101, duration=3153)

    # 16. "Make a Swipe gesture from ('655','1097') to ('636','1232')"
    driver.swipe(start_x=655, start_y=1097, end_x=636, end_y=1232, duration=2835)

    # 17. "Make a Swipe gesture from ('636','1227') to ('559','1353')"
    driver.swipe(start_x=636, start_y=1227, end_x=559, end_y=1353, duration=3165)

    # 18. "Make a Swipe gesture from ('568','1343') to ('424','1348')"
    driver.swipe(start_x=568, start_y=1343, end_x=424, end_y=1348, duration=3071)

    # 19. "Make a Swipe gesture from ('303','1154') to ('636','1169')"
    driver.swipe(start_x=303, start_y=1154, end_x=636, end_y=1169, duration=3827)

    # 20. "Make a Swipe gesture from ('482','961') to ('462','1507')"
    driver.swipe(start_x=482, start_y=961, end_x=462, end_y=1507, duration=3203)

    # 21. "Make a Swipe gesture from ('241','783') to ('178','357')"
    driver.swipe(start_x=241, start_y=783, end_x=178, end_y=357, duration=1497)

    # 22. "Make a long press gesture on 'ANDROID.VIEW.VIEW'"
    android_view_view = driver.find_element(By.XPATH, "//android.widget.FrameLayout[2]/android.view.View")
    TouchAction(driver).long_press(el=android_view_view, duration=0).perform()

    # 23. "Click 'ANDROID.VIEW.VIEW'"
    android_view_view = driver.find_element(By.XPATH, "//android.widget.FrameLayout[2]/android.view.View")
    android_view_view.click()

    # 24. "Click 'ANDROID.VIEW.VIEW'"
    android_view_view = driver.find_element(By.XPATH, "//android.widget.FrameLayout[2]/android.view.View")
    android_view_view.click()

    # 25. "Make a Zoom gesture on 'ANDROID.VIEW.VIEW'"
    android_view_view = (By.XPATH, "//android.widget.FrameLayout[2]/android.view.View")
    driver.addons().execute(Mobile_Extensions.zoomtoelementandroid(), *android_view_view)

    # 26. "Make a Zoom gesture on 'android:id/content'"
    android_colon_id_slash_content = (By.ID, "android:id/content")
    driver.addons().execute(Mobile_Extensions.zoomtoelementandroid(), *android_colon_id_slash_content)


# Get the screen size first with 'driver.get_window_rect()'

# Work out the size of the circle based on 80% of the width
def get_point_on_circle(step, itotal, origin, radius):
    """Lets make the points for the circle!!!"""
    step = int(step)
    itotal_steps = int()
    original = point
    raduis = double()

    double_theta = 2 * Math.PI * (step / itotal_steps)
    x = int()math.floor(math.cos(theta) * radius);
    y = int()math.floor(math.sin(theta) * radius);
    new_point = (origin.x + x, origin.y + y)
    return new_point


def draw_circle(driver, origin, radius, steps):
    """draw the circle using the points"""
    driver = driver
    origin = origin
    radius = double()
    steps = int()
    first_point = get_point_on_circle(0, steps, origin, radius)

    PointerInput finger = new PointerInput(Kind.TOUCH, "finger");
    Sequence circle = new Sequence(finger, 0);
    circle.addAction(finger.createPointerMove(NO_TIME, VIEW, firstPoint.x, firstPoint.y));
    circle.addAction(finger.createPointerDown(MouseButton.LEFT.asArg()));

    for (int i = 1; i < steps + 1; i++):
        Point point = getPointOnCircle(i, steps, origin, radius);
        circle.addAction(finger.createPointerMove(STEP_DURATION, VIEW, point.x, point.y))

    circle.addAction(finger.createPointerUp(MouseButton.LEFT.asArg()));
    driver.perform(Arrays.asList(circle))
